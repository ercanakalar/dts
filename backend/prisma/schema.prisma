generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model Auth {
  id           String   @id @default(uuid())
  email        String?  @unique
  tc           String   @unique
  phoneNumber  String   @unique
  password     String
  refreshToken String?
  accessToken  String
  rejectToken  String?
  permit       Permit?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Institution {
  id                 String               @id @default(uuid())
  name               String
  address            String
  phoneNumber1       String
  phoneNumber2       String
  institutionKey     String
  teachers           Teacher[]
  drivers            Driver[]
  students           Student[]
  permit             Permit[]
  classDetails       ClassDetails[]
  classroom          Classroom[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  Absenteeism        Absenteeism[]
  AbsenteeismDetails AbsenteeismDetails[]
}

model Parent {
  id           String   @id @default(uuid())
  authId       String?
  firstName    String
  lastName     String
  tc           String   @unique
  address      String
  phoneNumber1 String
  studentId    String
  student      Student  @relation(fields: [studentId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Student {
  id                 String               @id @default(uuid())
  authId             String?
  firstName          String
  lastName           String
  tc                 String               @unique
  address            String
  phoneNumber1       String
  phoneNumber2       String
  institutionKey     String
  classrooms         Classroom[]
  absentees          Absenteeism[]
  waypoint           Waypoint[]
  institution        Institution?         @relation(fields: [institutionId], references: [id])
  institutionId      String
  parents            Parent[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  absenteeismDetails AbsenteeismDetails[]
}

model Teacher {
  id             String       @id @default(uuid())
  authId         String?
  firstName      String
  lastName       String
  tc             String       @unique
  address        String
  phoneNumber1   String
  phoneNumber2   String
  institutionKey String
  experienceYear Int
  subjectId      String
  object         Subject      @relation(fields: [subjectId], references: [id])
  institutionId  String?
  institution    Institution? @relation(fields: [institutionId], references: [id])
  classrooms     Classroom[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Subject {
  id        String    @id @default(uuid())
  name      String
  Teacher   Teacher[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Classroom {
  id                 String              @id @default(uuid())
  startClass         DateTime
  endClass           DateTime
  classDate          DateTime
  status             ClassroomStatus
  institutionId      String
  institution        Institution?        @relation(fields: [institutionId], references: [id])
  classDetailsId     String
  classDetails       ClassDetails        @relation(fields: [classDetailsId], references: [id])
  teacherId          String
  teacher            Teacher             @relation(fields: [teacherId], references: [id])
  studentId          String
  student            Student             @relation(fields: [studentId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  absenteeismDetails AbsenteeismDetails?
}

model ClassDetails {
  id            String       @id @default(uuid())
  classNo       String
  description   String?
  classroom     Classroom[]
  institutionId String
  institution   Institution? @relation(fields: [institutionId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

model Absenteeism {
  id                 String               @id @default(uuid())
  date               DateTime
  joined             Int
  absent             Int
  scheduled          Int
  totalCount         Int
  studentId          String
  student            Student              @relation(fields: [studentId], references: [id])
  institutionId      String
  institution        Institution?         @relation(fields: [institutionId], references: [id])
  absenteeismDetails AbsenteeismDetails[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt

  @@unique([studentId, date])
}

model AbsenteeismDetails {
  id            String            @id @default(uuid())
  date          DateTime
  status        AbsenteeismStatus
  studentId     String
  student       Student           @relation(fields: [studentId], references: [id])
  classroomId   String            @unique
  classroom     Classroom         @relation(fields: [classroomId], references: [id])
  absenteeismId String?
  absenteeism   Absenteeism?      @relation(fields: [absenteeismId], references: [id])
  institutionId String
  institution   Institution?      @relation(fields: [institutionId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
}

model Driver {
  id             String       @id @default(uuid())
  authId         String
  firstName      String
  lastName       String
  tc             String       @unique
  address        String
  phoneNumber1   String
  phoneNumber2   String
  institutionKey String
  routes         Route[]
  institutionId  String?
  institution    Institution? @relation(fields: [institutionId], references: [id])
  waypoint       Waypoint[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Route {
  id         String   @id @default(uuid())
  waypoints  String
  classDate  DateTime
  classStart DateTime
  driverId   String
  driver     Driver   @relation(fields: [driverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model Waypoint {
  id        String   @id @default(uuid())
  address   String
  lon       Float
  lat       Float
  driverId  String
  driver    Driver   @relation(fields: [driverId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id        String   @id @default(uuid())
  roleType  String
  permit    Permit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Permit {
  id            String       @id @default(uuid())
  authId        String?      @unique
  auth          Auth?        @relation(fields: [authId], references: [id])
  roleId        String?
  role          Role?        @relation(fields: [roleId], references: [id])
  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

enum ClassroomStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum AbsenteeismStatus {
  SCHEDULED
  JOINED
  NOT_JOINED
}
